continue
YAML.load_file 'foba'
Time.holiday_rules
continue
IsBusinessDay.configuration
Time.holiday_rules
continue
continu
continue
date_or_time
date_or_type
days.map(&:to_time).send(position) == date_or_time
days.map(&:to_time).send(position)
days.map(&:to_time)
date_or_time
days.send(position)
continue
self
days.send(position)
position
days
continue
Time.parse('22/11/2018').thanksgiving?
continue
Time.parse('22/11/2018').thanksgiving?
Time.parse('29/11/2018').thanksgiving?
Time.parse('26/11/2018').thanksgiving?
Time.parse('26/11/2018')
Time.now.thanksgiving?
continue
Time.now.thanksgiving?
continue
Time.now.thanksgiving?
continue
Time.now.thanksgiving?
continue
Time.now.thanksgiving?
continue
Time.now.thanksgiving?
continue
Time.now.thanksgiving?
Time.holiday_rules
continue
options
continue
options
continue
options
continue
Time.holiday_rules[:thanksgiving]
Time.holiday_rules[:thanksgiving}
Time.holiday_rules.last
Time.holiday_rules
d.class.holiday_rules
d.class.holiday_rules.last
d.thanksgiving?
d.christmas_day?
d = Time.zone.parse('25/12/2018')
d.christmas_day?
d = Time.zone.now
continue
Time.holidays.last
Time.holidays
d.thanksgiving?
d = Time.zone.now
continue
d.thanksgiving?
d = Time.zone.now
continue
d.thanksgiving?
d = Time.zone.now
continue
d.thanksgiving?
d = Time.zone.now
continue
d.christmas_day?
d = Time.zone.now
d.christmas_day?
d = Time.zone.parse('25/12/2018')
continue
[0,1,2,3,4,5].first
[0,1,2,3,4,5].second
[0,1,2,3,4,5].third
[0,1,2,3,4,5].fourth
[0,1,2,3,4,5].sixth
[0,1,2,3,4,5].sith
[0,1,2,3,4,5].fifth
d.christmas_day?
d = Time.zone.parse('25/12/2018')
Time.now.christmas_day?
Time.now.christmas?
continue
Time.now.christmas?
continue
holidays
continue
holidays.first["name"]
holidays.first[:name]
holidays
continue
holidays.keys
holidays
continue
foo = YAML.load_file(IsBusinessDay.configuration.holiday_config)
IsBusinessDay.configuration.holiday_config
continue
d1.to_date.step(end_of_month.to_date, 1).select(&:monday?)
d1.to_date.step(end_of_month, 1)
d1.to_date.step(end_of_month, 1).to_a
d1.to_date.step(end_of_month, 1).to_a.send(:select) { |d| d.monday? }
d1.to_date.step(end_of_month, 1).send(:select) { |d| d.monday? }
d1.to_date.step(end_of_month, 1)
d1 = beginning_of_month
end_of_month
beginning_of_month
continue
subject.beginning_of_month.to_date.step
subject.beginning_of_month.to_date
subject.beginning_of_month.step
subject.beginning_of_month
subject
continue
days.send(:select) { |d| d.send(:"#{day}?") }
day = :tuesday
days.send(:select) { |d| d.send(:"#{day}?") }
days.send(:select) { |d| d.send(&:"#{day}?") }
days.send(:select) { |d| d.send(&:"#{day}?".to_sym) }
days.send(:select) { |d| d.send(&"#{day}?".to_sym) }
days.send(:select, "&#{day}?".to_sym)
days.send(:select, "&:#{day}?".to_sym)
days.send(:select, "#{day}?".to_sym)
days = date.beginning_of_month.step(date.end_of_month, 1)
date = Date.today
day = :monday
IsBusinessDay::Helpers.fetch_days
continue
IsBusinessDay::Helpers.fetch_days(:monday)
fetch_days :monday
continue
nbd.monday?
nbd.day
nbd.week_day
nbd.wday
nbd.business_day?
nbd
continue
foo.business_day?
foo.business_day
foo = friday.next_business_day
continue
friday.next_business_day
continue
contniue
continue
nbd.to_time
nbd
continue
mday
month
continue
Time.zone.parse('25/12/2018 6:45pm')
Time.zone.parse('25/12/2018')
self
mday
month
continue
Date.parse('24/12/2018')
Date.parse('12/24/2018')
Date.parse('12/24/2018'(
date
